import csv
import os
import cv2
import torch
import numpy as np
import pandas as pd
from typing import List
from pydantic import BaseModel


class Row(BaseModel):
    image_name: str
    scroll_number: int
    xmin: float
    ymin: float
    xmax: float
    ymax: float
    iou: float = -1
    

def correct_bounding_boxes(bboxes):
    # Ensure input is a NumPy array
    bboxes = np.asarray(bboxes)
    
    # Correct x coordinates
    # Swap the x coordinates if the top-left x is greater than the bottom-right x
    x_min = np.minimum(bboxes[:, 0], bboxes[:, 2])
    x_max = np.maximum(bboxes[:, 0], bboxes[:, 2])
    
    # Correct y coordinates
    # Swap the y coordinates if the top-left y is greater than the bottom-right y
    y_min = np.minimum(bboxes[:, 1], bboxes[:, 3])
    y_max = np.maximum(bboxes[:, 1], bboxes[:, 3])
    
    # Construct the corrected bounding boxes array
    corrected_bboxes = np.stack([x_min, y_min, x_max, y_max], axis=1)
    
    return corrected_bboxes


def sort_by_distance(bbox_list): 
    # Compute distances from (0,0) using the top-left point (x_min, y_min)
    distances = torch.sqrt(bbox_list[:, 0]**2 + bbox_list[:, 1]**2)

    # Sort indices based on distance
    sorted_indices = torch.argsort(distances)

    # Sort the tensor
    sorted_tensor = bbox_list[sorted_indices]

    return sorted_tensor


def export_training_results_to_csv(train_result: List[Row], csv_file):
    with open(csv_file, mode="w", newline="") as file:
        writer = csv.DictWriter(file, fieldnames=train_result[0].model_dump().keys())
        writer.writeheader()   
        for res in train_result:
            writer.writerow(res.model_dump())  
    
    print(f"CSV file '{csv_file}' has been created successfully.")



def draw_bounding_boxes_from_csv(image_dir_path, csv_path):
    output_folder = "output_images/"
    os.makedirs(output_folder, exist_ok=True)

    image_name = None
    
    df = pd.read_csv(csv_path)

    grouped = df.groupby('image_name')
    
    for image_name, group in grouped:  
        image_name += ".jpg"
        image_path = os.path.join(image_dir_path, image_name)
        image = cv2.imread(image_path)
    
        for _, row in group.iterrows():
            xmin, ymin, xmax, ymax = map(int, [row['xmin'], row['ymin'], row['xmax'], row['ymax']])
            confidence = row.get('iou', -1)
            label = row.get('scroll_number', "scroll")

            # Draw rectangle
            cv2.rectangle(image, (xmin, ymin), (xmax, ymax), (0, 0, 255), 2)

            # Draw label and confidence
            text = f"{label}: {confidence:.2f}"
            cv2.putText(image, text, (xmin, max(ymin - 10, 20)), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3)  # Bigger font
        
        output_path = os.path.join(output_folder, image_name)    
        cv2.imwrite(output_path, image)
        print(f"Saved: {output_path}")




def draw_bounding_boxes_from_csv_single_image(image_path, csv_path):
    output_folder = "output_images/"
    os.makedirs(output_folder, exist_ok=True)

    image_name: str = os.path.splitext(os.path.basename(image_path))[0]
    
    df = pd.read_csv(csv_path)
    image = cv2.imread(image_path)

    for _, row in df.iterrows():
        xmin, ymin, xmax, ymax = map(int, [row['xmin'], row['ymin'], row['xmax'], row['ymax']])
        confidence = row.get('iou', -1)
        label = row.get('scroll_number', "scroll")

        # Draw rectangle
        cv2.rectangle(image, (xmin, ymin), (xmax, ymax), (0, 0, 255), 2)

        # Draw label and confidence
        text = f"{label}: {confidence:.2f}"
        cv2.putText(image, text, (xmin, max(ymin - 10, 20)), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3)  # Bigger font
    
    image_name += ".JPG"
    output_path = os.path.join(output_folder, image_name)
    cv2.imwrite(output_path, image)
    print(f"Saved: {output_path}")

    

def calculate_precision(iou_scores, threshold=0.5):
    TP = sum(1 for iou in iou_scores if iou >= threshold)  
    FP = sum(1 for iou in iou_scores if iou < threshold and iou > 0) 
    precision = TP / (TP + FP) if (TP + FP) > 0 else 0
    return precision

def calculate_map(iou_scores, thresholds=[0.5, 0.75, 0.9]):
    precisions = [calculate_precision(iou_scores, t) for t in thresholds]
    map_value = sum(precisions) / len(thresholds) 
    return map_value

def calculate_recall(iou_scores, threshold=0.5):
    TP = sum(1 for iou in iou_scores if iou >= threshold) 
    FN = sum(1 for iou in iou_scores if iou == 0.0)
    recall = TP / (TP + FN) if (TP + FN) > 0 else 0
    
    return recall

def calculate_f1(precision, recall):
    return (2 * precision * recall) / (precision + recall) if (precision + recall) > 0 else 0



iou_scores = [0.9181267619132996, 0.8027963638305664, 0.7509658932685852, 0.9194065928459167, 0.855832576751709, 0.8450172543525696, 0.9053326845169067, 0.8564311265945435, 0.7165610194206238, 0.8841506838798523, 0.9168248772621155, 0.7523345351219177, 0.8202004432678223, 0.8502155542373657, 0.7798286080360413, 0.6645280718803406, 0.893202006816864, 0.8979058861732483, 0.8841734528541565, 0.8986249566078186, 0.9514345526695251, 0.9237368106842041, 0.9314088225364685, 0.678463339805603, 0.5467933416366577, 0.8567487597465515, 0.862877607345581, 0.6020240783691406, 0.8645217418670654, 0.816780149936676, 0.7884654998779297, 0.7959508299827576, 0.8646968603134155, 0.9391522407531738, 0.9458153247833252, 0.8620190620422363, 0.8484771251678467, 0.9204944372177124, 0.9141135215759277, 0.6704838871955872, 0.858488142490387, 0.6690470576286316, 0.769018828868866, 0.853803277015686, 0.9354599714279175, 0.9030565619468689, 0.9259775280952454, 0.7493363618850708, 0.7656900882720947, 0.8969818949699402, 0.8152084946632385, 0.8023607134819031, 0.8143582344055176, 0.8615309000015259, 0.8666566014289856, 0.8386030793190002, 0.6437219381332397, 0.9213824272155762, 0.8140357136726379, 0.8723442554473877, 0.6735416650772095, 0.807309627532959, 0.7667243480682373, 0.17103224992752075, 0.7505435347557068, 0.8408178687095642, 0.8355554342269897, 0.6835280060768127, 0.7826513051986694, 0.8303455710411072, 0.8903632164001465, 0.9599249958992004, 0.7882018089294434, 0.8613409996032715, 0.775094211101532, 0.9560069441795349, 0.7866708636283875, 0.8399757742881775, 0.8197546601295471, 0.7478599548339844, 0.8330608010292053, 0.9183003902435303, 0.9268032908439636, 0.06241891160607338, 0.02487274631857872, 0.07258202880620956, 0.8685159087181091, 0.6419405341148376, 0.30458372831344604, 0.7273932099342346, 0.8421536087989807, 0.8003730773925781, 0.8518738150596619, 0.8391945958137512, 0.7613105773925781, 0.5795533657073975, 0.7925201654434204, 0.841427206993103, 0.2677287757396698, 0.8040724992752075, 0.1254008263349533, 0.4173596203327179, 0.6765841841697693, 0.01386048924177885, 0.8033843636512756, 0.5288046002388, 0.4624011218547821, 0.7542172074317932, 0.03321561962366104, 0.6113936901092529, 0.30182239413261414, 0.5639702677726746, 0.39503684639930725, 0.6048223376274109, 0.7902161478996277, 0.018563969060778618, 0.5999511480331421, 0.6432732939720154, 0.4169047474861145, 0.6813555955886841, 0.9482240676879883, 0.8246023058891296, 0.623088002204895, 0.9651432633399963, 0.51152104139328, 0.5464646220207214, 0.490235835313797, 0.8671221733093262, 0.8909605145454407, 0.8644742369651794, 0.8114105463027954, 0.8722229599952698, 0.881458044052124, 0.8679150342941284, 0.7538665533065796, 0.9585999250411987, 0.8997929692268372, 0.7573737502098083, 0.9430184960365295, 0.8476705551147461, 0.8879924416542053, 0.7907237410545349, 0.8021093010902405, 0.6512376070022583, 0.8210548758506775, 0.8199359774589539, 0.7283215522766113, 0.8722819089889526, 0.7990031242370605, 0.929379940032959, 0.741117537021637, 0.8337192535400391, 0.7627476453781128, 0.8932207226753235, 0.48435673117637634, 0.8878312110900879, 0.7832436561584473, 0.7520095109939575, 0.8523473143577576, 0.7176631093025208, 0.8561399579048157, 0.847724199295044, 0.814816415309906, 0.8181338310241699, 0.7364667654037476, 0.748944103717804, 0.8115115165710449, 0.913548469543457, 0.8769396543502808, 0.7663840651512146, 0.8688212633132935, 0.7614914774894714, 0.635158360004425, 0.8190476298332214, 0.7032533288002014, 0.720851719379425, 0.7264574766159058, 0.7391771674156189, 0.8024022579193115, 0.7820784449577332, 0.9485514760017395, 0.8084370493888855, 0.8041379451751709, 0.9082171320915222, 0.8792212009429932, 0.5730867385864258, 0.8464133739471436, 0.6806883215904236, 0.5824285745620728, 0.8474743366241455, 0.8213481307029724, 0.8687213659286499, 0.7828460931777954, 0.7627865076065063, 0.8593116998672485, 0.7421143651008606, 0.9356016516685486, 0.7972131967544556, 0.8520556688308716, 0.8613623380661011, 0.8031009435653687, 0.8088792562484741, 0.7650240659713745, 0.8021162748336792, 0.857458233833313, 0.6476171612739563, 0.9695774912834167, 0.810535728931427, 0.7892048954963684, 0.824603796005249, 0.6095523238182068, 0.9292508959770203, 0.8000916242599487, 0.7976775765419006, 0.6723532676696777, 0.8641217350959778, 0.9241794347763062, 0.7039322853088379, 0.7947478890419006, 0.7463299632072449, 0.7008161544799805, 0.7622894048690796, 0.8830828666687012, 0.7935939431190491, 0.756841242313385, 0.8096973299980164, 0.8544514775276184, 0.7944643497467041, 0.7060107588768005, 0.8427478075027466, 0.8228822946548462, 0.6851910352706909, 0.7577974200248718, 0.7144296169281006, 0.865912675857544, 0.7435528635978699, 0.6791742444038391, 0.823733389377594, 0.658502459526062, 0.3153315484523773, 0.749081552028656, 0.9029482007026672, 0.8458194732666016, 0.8071855902671814, 0.7787235975265503, 0.8656759262084961, 0.8776628971099854, 0.8115970492362976, 0.8224440813064575, 0.8885993361473083, 0.6385905742645264, 0.7439751625061035, 0.8615444898605347, 0.8325061202049255, 0.8061923384666443, 0.7207509279251099, 0.636410117149353, 0.6891094446182251, 0.8291494250297546, 0.7114501595497131, 0.7760408520698547, 0.7454724311828613]

precision = calculate_precision(iou_scores)
recall = calculate_recall(iou_scores)
map_score = calculate_map(iou_scores)
f1_score = calculate_f1(precision, recall)

print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"mAP: {map_score:.2f}")
print(f"F1-Score: {f1_score:.2f}")


print(" ====== Faster results ==============")
iou_scores = [0.9161830544471741, 0.7268102765083313, 0.7121874094009399, 0.7984767556190491, 0.8959089517593384, 0.7015568614006042, 0.8827701210975647, 0.8548634648323059, 0.8053896427154541, 0.7992801070213318, 0.7971989512443542, 0.8995359539985657, 0.7936963438987732, 0.6789471507072449, 0.7373837828636169, 0.012790486216545105, 0.8959847092628479, 0.9008997678756714, 0.8707760572433472, 0.8844648599624634, 0.8828078508377075, 0.0, 0.787980854511261, 0.029796738177537918, 0.7169342041015625, 0.7755787372589111, 0.8724586963653564, 0.5990082025527954, 0.1086869165301323, 0.8812229037284851, 0.6206033229827881, 0.8020094037055969, 0.8167163133621216, 0.8727506399154663, 0.8373765349388123, 0.009007742628455162, 0.7607535719871521, 0.9347454905509949, 0.8939244747161865, 0.8216027617454529, 0.8945930004119873, 0.0, 0.04243512824177742, 0.9266461133956909, 0.2805779278278351, 0.9262187480926514, 0.7644559144973755, 0.8191813230514526, 0.01897558569908142, 0.6074426770210266, 0.7395095825195312, 0.648247241973877, 0.8254010081291199, 0.8227055668830872, 0.7982770800590515, 0.005126771982759237, 0.0, 0.032275695353746414, 0.9264870285987854, 0.9363282322883606, 0.08083713799715042, 0.7336751818656921, 0.9244094491004944, 0.28893378376960754, 0.0006244849064387381, 0.09131315350532532, 0.8901365995407104, 0.1358749270439148, 0.7145645022392273, 0.016939397901296616, 0.8336561918258667, 0.8838468194007874, 0.7587552070617676, 0.8374121189117432, 0.7449742555618286, 0.867829442024231, 0.26052457094192505, 0.10261133313179016, 0.6686441898345947, 0.8153418302536011, 0.7918103933334351, 0.8831679224967957, 0.8626611828804016, 0.6155882477760315, 0.044616300612688065, 0.08623681962490082, 0.17806755006313324, 0.1426827311515808, 0.10001976042985916, 0.06521661579608917, 0.25043728947639465, 0.0984533354640007, 0.044065922498703, 0.2662031650543213, 0.02538367733359337, 0.12455417960882187, 0.16504932940006256, 0.6088237762451172, 0.0, 0.26222512125968933, 0.095899797976017, 0.0, 0.16872891783714294, 0.03928437456488609, 0.06721479445695877, 0.15157194435596466, 0.10787007212638855, 0.5584038496017456, 0.13074371218681335, 0.007798574864864349, 0.42717161774635315, 0.1541469246149063, 0.04536396265029907, 0.0032848240807652473, 0.19351528584957123, 0.023492369800806046, 0.09395550191402435, 0.48997822403907776, 0.7808241844177246, 0.21344763040542603, 0.6302161812782288, 0.23393000662326813, 0.6673973798751831, 0.26414990425109863, 0.2044321894645691, 0.23031111061573029, 0.5363060235977173, 0.8647695779800415, 0.8859463930130005, 0.8505995869636536, 0.8263978362083435, 0.8672104477882385, 0.8022912740707397, 0.822975218296051, 0.6976159811019897, 0.871454119682312, 0.8797639012336731, 0.8186085224151611, 0.7655176520347595, 0.8879356980323792, 0.8783875107765198, 0.6826152205467224, 0.8466507792472839, 0.4940400719642639, 0.7806230783462524, 0.853013813495636, 0.7033342719078064, 0.9140984416007996, 0.8700712323188782, 0.876095175743103, 0.9038827419281006, 0.794542133808136, 0.7108335494995117, 0.911587655544281, 0.85950767993927, 0.8057928085327148, 0.8252757787704468, 0.8586533069610596, 0.8443801403045654, 0.828652024269104, 0.8209529519081116, 0.8407440781593323, 0.7659335136413574, 0.7991127371788025, 0.11437276750802994, 0.8839576244354248, 0.8049797415733337, 0.8498424887657166, 0.8339111804962158, 0.823716938495636, 0.8717622756958008, 0.7912008166313171, 0.0, 0.7748229503631592, 0.6804885864257812, 0.7412009835243225, 0.7635366320610046, 0.6960688233375549, 0.8422408103942871, 0.7423457503318787, 0.8470180034637451, 0.3375178873538971, 0.7554550170898438, 0.9309089183807373, 0.41540661454200745, 0.4639960527420044, 0.9047171473503113, 0.7769367098808289, 0.6133861541748047, 0.8578602075576782, 0.7137050628662109, 0.85445237159729, 0.7513344287872314, 0.0, 0.7989826202392578, 0.6905681490898132, 0.9164425134658813, 0.8207942843437195, 0.915346622467041, 0.848287045955658, 0.7162946462631226, 0.8857787847518921, 0.8172988891601562, 0.3276248574256897, 0.799790620803833, 0.014360015280544758, 0.8713728189468384, 0.5164375305175781, 0.4464791417121887, 0.8764120936393738, 0.6590906977653503, 0.8217689394950867, 0.7306984663009644, 0.8110432028770447, 0.6790732741355896, 0.9041954278945923, 0.8469570279121399, 0.8375190496444702, 0.6059500575065613, 0.8523845672607422, 0.8117316365242004, 0.012054097838699818, 0.796227753162384, 0.8030522465705872, 0.06321626901626587, 0.01807471551001072, 0.8104548454284668, 0.8208665251731873, 0.8142396211624146, 0.8157467842102051, 0.021755751222372055, 0.7405022978782654, 0.8251879811286926, 0.8038492202758789, 0.8684410452842712, 0.0, 0.005987086333334446, 0.22989875078201294, 0.0, 0.6721864342689514, 0.599785327911377, 0.08131775259971619, 0.80520099401474, 0.7941150069236755, 0.7790315747261047, 0.76335608959198, 0.7901346683502197, 0.47921109199523926, 0.8597041964530945, 0.8838487863540649, 0.6407323479652405, 0.7479045391082764, 0.8219122886657715, 0.8252742886543274, 0.38800621032714844, 0.827927827835083, 0.007824401371181011, 0.0, 0.04408887028694153, 0.0, 0.8083630204200745, 0.7328464984893799 ]
precision = calculate_precision(iou_scores)
recall = calculate_recall(iou_scores)
map_score = calculate_map(iou_scores)
f1_score = calculate_f1(precision, recall)

print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"mAP: {map_score:.2f}")
print(f"F1-Score: {f1_score:.2f}")
